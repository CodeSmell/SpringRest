<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">


	<!-- 
		REST API is secured and requires an Authentication object to 
		be valid in the HTTP Session. However, the REST API does not
		interact with the UI. It only returns HTTP status codes.
	 -->

	<!-- Used by the DelegatingFilterProxy -->
	<security:http use-expressions="true" entry-point-ref="http401EntryPoint">
		<security:intercept-url pattern="/login" access="permitAll()" />
		<security:intercept-url pattern="/user" access="permitAll()" />
		<security:intercept-url pattern="/**" access="isAuthenticated()" />
		<security:form-login 
			authentication-success-handler-ref="authSuccessHandler"
    		authentication-failure-handler-ref="authFailureHandler"/>
		<security:logout 
			delete-cookies="JSESSIONID" 
			invalidate-session="true"
			success-handler-ref="logoutSuccessHandler"/>    		
		<security:csrf disabled="true" />
	</security:http>

	<!-- 
		eliminate default behavior to redirect 
	 -->
	<bean id="authSuccessHandler" class="codesmell.spring.security.NoRedirectAuthenticationSuccessHandler"/>
	<bean id="authFailureHandler" class="codesmell.spring.security.NoRedirectAuthenticationFailureHandler"/>
	<bean id="logoutSuccessHandler" class="org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler"/>

	<!-- 
		when user accesses REST without authentication these handle the response
	 -->
	<bean id="http403EntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />
	<bean id="http401EntryPoint" class="codesmell.spring.security.Http401UnauthorizedEntryPoint" />

	<!-- authentication manager -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="inMemoryAuth"/> 
	</security:authentication-manager>

	<!-- in-memory authentication -->
	<security:user-service id="inMemoryAuth">
		<security:user name="mikeb" password="password" authorities="ROLE_USER" />
	</security:user-service>

</beans>